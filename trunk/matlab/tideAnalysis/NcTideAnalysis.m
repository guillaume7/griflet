function [s_Yres, s_Ystats, s_Xres] = NcTideAnalysis(filename, s_p)
%function [s_Yres, s_Ystats, s_Xres] = NcTideAnalysis(filename, s_p)
%
%ex: filename = 'mohidgijon_level1.nc';
%ex: s_p = struct( ...
%        'startdate', [2004 2 1 0 0 0] ...
%    ,   'dt', 600 ... %time interval in seconds (always seconds)
%    ,   'lat', 43.5 ... %ºN
%    ,   'snr_crit', 2. ... %Chosen signal-2-noise ratio
%    ,   'delta', 0. ...  %Begin offset in netcdf time units
%    ,   'count', 365*24.0*6. ... %netcdf var length
%    ,   'factor', 1. ... %netcdf time units conversion factor(ex:days to seconds)
%    );
%
%Output:
% s_Yresults = struct( ...
%        'signal', signal ...
%    ,   'residual', residual ...
%    ,   'tidepred', tidepred ...
%    ,   'amplitude', tidecon(:,1) ...
%    ,   'phase', tidecon(:,3) ...
% );
%
% s_Ystats = struct( ...
%        'snr', tidecon(:,1) ./ tidecon(:,2) ...
%    ,   'snr_crit', snr_crit ...
%    ,   'amperror', tidecon(:,2) ...
%    ,   'phaserror', tidecon(:,4) ...
% );
%
% s_Xresults = struct( ...
%        'freqname', freqname ...
%    ,   'freq', freq ...
%    ,   'time', time ...
%    ,   'startdate', startdate ...
%    ,   'dt', dt ...
% );

if isfield(s_p, 'special_ssh')
    ssh = s_p.special_ssh;
else
    ssh = 'ssh';
end

time = nc_varget(filename, 'time', s_p.delta, s_p.count);
time = ( time - time(1) ) * s_p.factor;
signal = nc_varget(filename, ssh, [s_p.delta 0 0], [s_p.count 1 1]);
signal = signal - mean(signal(find(~isnan(signal))));
[s_Yres, s_Ystats, s_Xres] = ...
         TimeSerieTideAnalysis( ...
                signal, time ...
            , s_p.startdate, s_p.dt ...
            , s_p.lat, s_p.snr_crit ...
         );
